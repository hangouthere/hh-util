// Vitest Snapshot v1

exports[`DependencyManager > Hydrating Maps > Hydration Resolver Helpers > getAccessorNamesForMetas > should return a unique list of AccessorNames for all provided LoaderMetas 1`] = `
Set {
  "plugin2-behavior",
  "Plugin1-v0.0.1",
  "plugin4-behavior",
  "Plugin2-v0.0.1",
}
`;

exports[`DependencyManager > Hydrating Maps > Hydration Resolver Helpers > getFqnsForBehaviorName > should return a list of FQNs that satisfy the BehaviorName 1`] = `
Set {
  "Plugin1-v0.0.1",
  "Plugin2-v0.0.1",
}
`;

exports[`DependencyManager > Hydrating Maps > hydrateFqnToLoadChainMap > should resolve the dependency chain for a "generic" BehaviorName 1`] = `
{
  "Plugin1-v0.0.1": Set {
    "Plugin2-v0.0.1",
  },
  "Plugin2-v0.0.1": Set {},
  "common1": Set {
    "Plugin1-v0.0.1",
    "Plugin2-v0.0.1",
  },
}
`;

exports[`DependencyManager > Hydrating Maps > hydrateFqnToMetaMap > should accept newly discovered Loader Metas, mapped by FQN 1`] = `
{
  "Plugin1-v0.0.1": {
    "manifest": {
      "accessors": {
        "plug2": "plugin2-behavior",
      },
      "behaviors": [
        "plugin1-behavior",
        "common1",
      ],
      "name": "Plugin1",
      "pluginPath": "",
      "type": "SERVICE",
      "version": "0.0.1",
    },
    "pluginDefinition": [Function],
  },
  "Plugin2-v0.0.1": {
    "manifest": {
      "behaviors": [
        "plugin2-behavior",
        "common1",
      ],
      "name": "Plugin2",
      "pluginPath": "",
      "type": "SERVICE",
      "version": "0.0.1",
    },
    "pluginDefinition": [Function],
  },
  "Plugin3-v0.0.1": {
    "manifest": {
      "accessors": {
        "plug1": "Plugin1-v0.0.1",
        "plug4": "plugin4-behavior",
      },
      "behaviors": [
        "plugin3-behavior",
      ],
      "name": "Plugin3",
      "pluginPath": "",
      "type": "SERVICE",
      "version": "0.0.1",
    },
    "pluginDefinition": [Function],
  },
  "Plugin4-v0.0.1": {
    "manifest": {
      "accessors": {
        "plug2": "Plugin2-v0.0.1",
      },
      "behaviors": [
        "plugin4-behavior",
      ],
      "name": "Plugin4",
      "pluginPath": "",
      "type": "SERVICE",
      "version": "0.0.1",
    },
    "pluginDefinition": [Function],
  },
}
`;

exports[`DependencyManager > Hydrating Maps > hydrateFqnToMetaMap > should detect already loaded FQNs and build a failmap 1`] = `
{
  "Plugin1-v0.0.1": [Error: [PluginLoaded] - This Plugin Name & Version are already Loaded. To load the Manifest being used now the previous Plugin must be Unloaded! Plugin FQN: Plugin1-v0.0.1],
}
`;

exports[`DependencyManager > Loading the Dependency Chain > Mapping Accessor Aliases > should handle a Manifest missing an Alias Mapping 1`] = `{}`;

exports[`DependencyManager > Loading the Dependency Chain > Mapping Accessor Aliases > should map the FQN instances to the alias names defined in a Manifest's Alias Mapping 1`] = `
{
  "plug2": Set {
    pluginDef {
      "accessors": {},
      "enabled": false,
      "host": {
        "getOption": [MockFunction spy] {
          "calls": [
            [
              "Plugins.Plugin2.enabled",
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "setOption": [MockFunction spy],
      },
      "manifest": {
        "behaviors": [
          "plugin2-behavior",
          "common1",
          "Plugin2",
        ],
        "name": "Plugin2",
        "pluginPath": "",
        "type": "SERVICE",
        "version": "0.0.1",
      },
      "status": 0,
    },
  },
}
`;

exports[`DependencyManager > Loading the Dependency Chain > Plugin Factory/Instantiation > should instantiate a long-starting Plugin 1`] = `
pluginDef {
  "accessors": {},
  "enabled": false,
  "host": {
    "getOption": [MockFunction spy],
    "setOption": [MockFunction spy],
  },
  "manifest": {
    "behaviors": [
      "plugin2-behavior",
      "common1",
      "Plugin2",
    ],
    "name": "Plugin2",
    "pluginPath": "",
    "type": "SERVICE",
    "version": "0.0.1",
  },
  "status": 0,
}
`;
